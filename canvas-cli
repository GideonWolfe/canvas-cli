#!/usr/bin/python3

import calendar
import datetime
from tabulate import tabulate
import yaml
import json
import requests
import io
import sys
import argparse
import Fetch as Fetch
import Format as Format

# Global Variables
conf = {}


# Load config file
def load_config(config_file):
    with open(config_file, 'r') as stream:
        try:
            return yaml.safe_load(stream)
        except yaml.YAMLError as exc:
            print(exc)

# Returns tuple of (assignmentID, submissionURL)
def chooseAssignment(courseId):
    assignments = Fetch.fetchAssignments(courseId, canvasDomain, canvasToken)
    idDict = {}
    HEADERS = ["#", "Name"]
    tableData = []
    i = 0
    for assignment in assignments:
        idDict.update({i:(assignment['id'], assignment['name'], assignment['submission']['preview_url'])})
        i += 1
    for num in idDict.keys():
        tableData.append([num, idDict[num][1]])
    print(tabulate(tableData, headers=HEADERS, tablefmt="fancy_grid"))
    userChoice = int(input("Choose an assignment: "))
    return((idDict[userChoice][0], idDict[userChoice][1], idDict[userChoice][2]))


# Returns course ID but presents user
# with human readable course numbers
def chooseCourse():
    courses = Fetch.fetchCourseIDs(canvasDomain, canvasToken)
    tableData = []
    HEADERS = ["#", "Course"]
    idDict = {}
    i = 0
    for item in courses.items():
        idDict.update({i:item})
        i = i+1
    for num in idDict.keys():
        tableData.append([num, idDict[num][0]])
    print(tabulate(tableData, headers=HEADERS, tablefmt="fancy_grid"))
    userChoice = int(input("Choose a course: "))
    return(idDict[userChoice][1])

def chooseFile():
    files = Fetch.fetchFiles(chooseCourse(), canvasDomain, canvasToken)
    tableData = []
    HEADERS = ["#", "Name"]
    #  for file in files:
        #  print(file['url'])
    idDict = {}
    i = 0
    for classFile in files:
        idDict.update({i:(classFile['display_name'], classFile['url'])})
        i = i+1
    for num in idDict.keys():
        tableData.append([num, idDict[num][0]])
    print(tabulate(tableData, headers=HEADERS, tablefmt="fancy_grid"))
    userChoice = int(input("Choose a course: "))
    return(idDict[userChoice][1])


# Prints list of assignments for a given course
def listAssignments(courseId, summary=False):
    assignments = Fetch.fetchAssignments(courseId, canvasDomain, canvasToken)
    for assignment in assignments:
        if summary:
            print(" â€¢ "+assignment['name'])
        else:
            print(assignment['name'])


# Prints list of assignments for a given course
def listAssignmentsTable(courseId):
    assignments = Fetch.fetchAssignments(courseId, canvasDomain, canvasToken)
    print(assignments)
    tableData = []
    HEADERS=["ID", "Name", "Due Date", "Score"]
    for assignment in assignments:
        fullName = assignment['name']
        ID = assignment['id']
        scoreString = Format.formatScore(assignment, False)
        dueDate = Format.formatDueDate(assignment)
        tableData.append((ID, fullName, dueDate, scoreString))
    print(tabulate(tableData, headers=HEADERS, tablefmt="fancy_grid"))


# Prints a list of active courses
def listActiveCourses():
    courses = Fetch.fetchActiveCourses(canvasDomain, canvasToken)
    for course in courses:
        fullName = course['name']
        courseId = course['id']
        endDate = course['end_at']
        if not endDate:
            print("[ID: "+str(courseId)+"] "+fullName)


# Prints a list of active courses in a table
def listActiveCoursesTable():
    courses = Fetch.fetchActiveCourses(canvasDomain, canvasToken)
    tableData = []
    HEADERS=["ID", "Name"]
    for course in courses:
        fullName = course['name']
        courseId = course['id']
        endDate = course['end_at']
        if not endDate:
            tableData.append((courseId, fullName))
    print(tabulate(tableData, headers=HEADERS, tablefmt="fancy_grid"))


# Prints a list of active courses and their outstanding assignments
def assignmentSummary():
    courses = Fetch.fetchCourseIDs(canvasDomain, canvasToken)
    #  print(courses.keys())
    for course in courses:
        print("\u0332".join(course))
        listAssignments(courses[course], True)


def parseArgs():
    args = argparse.ArgumentParser(
        description='A light-weight command-line interface for canvas.')

    args.add_argument('-list', choices=['courses', 'assignments'],
                      help='List either courses or assignments')
    args.add_argument('-courseID', type=str,
                      help='If you know the ID of your course, add it here to speed up the search')
    args.add_argument('-summary', action='store_true',
                      help='print a summary of courses')
    args.add_argument('-download', metavar='assignmentID', type=str,
                      help='download either a course file or assignment submission')
    return args.parse_args()

def main():

    # Declare global variables
    global conf
    global canvasToken
    global canvasDomain

    # Load config file & save config file
    with open("config.yaml", 'r') as stream:
        conf = yaml.safe_load(stream)

    canvasDomain = str(conf['default']['canvasdomain'])
    canvasToken = str(conf['default']['canvastoken'])

    args = parseArgs()

    if args.list and args.list == 'courses':
        listActiveCoursesTable()

    if args.list and args.list == 'assignments':
        if args.courseID:
            listAssignmentsTable(args.courseID)
        else:
            listAssignmentsTable(chooseCourse())

    if args.summary:
        assignmentSummary()

    if args.download and args.download == 'submission':
        Fetch.downloadFile(chooseAssignment(chooseCourse()))
    if args.download and args.download == 'file':
        Fetch.downloadFile(chooseFile())

if __name__ == "__main__":
    main()

