#!/usr/bin/python3

import calendar
import datetime
import humanfriendly
from tabulate import tabulate
import yaml
import json
import requests
import io
import sys
import os
import argparse
import Fetch as Fetch
import Format as Format

# Global Variables
conf = {}


# Load config file
def load_config(config_file):
    with open(config_file, 'r') as stream:
        try:
            return yaml.safe_load(stream)
        except yaml.YAMLError as exc:
            print(exc)

# Returns tuple of (assignmentID, assignmentName, submissionURL)
def chooseAssignment(courseId):
    assignments = Fetch.fetchAssignments(courseId, canvasDomain, canvasToken)
    idDict = {}
    HEADERS = Format.formatHeaders(["#", "Name"])
    tableData = []
    i = 0
    for assignment in assignments:
        idDict.update({i:(assignment['id'], assignment['name'], assignment['submission']['preview_url'])})
        i += 1
    for num in idDict.keys():
        tableData.append([num, idDict[num][1]])
    print(tabulate(tableData, headers=HEADERS, tablefmt="fancy_grid"))
    userChoice = input("Choose an assignment: ")
    if userChoice == '':
        sys.exit()
    elif int(userChoice) not in idDict.keys():
        sys.exit()
    return((idDict[int(userChoice)][0], idDict[int(userChoice)][1], idDict[int(userChoice)][2]))

# Returns tuple of (courseID, courseName, url)
def chooseCourse():
    courses = Fetch.fetchActiveCourses(canvasDomain, canvasToken)
    tableData = []
    HEADERS = Format.formatHeaders(["#", "Course"])
    idDict = {}
    i = 0
    for course in courses:
        # hack to make sure course is active
        if not course['end_at']:
            url = canvasDomain+"courses/"+str(course['id'])
            idDict.update({i:(course['id'], course['name'], url)})
            i = i+1
    for num in idDict.keys():
        tableData.append([num, idDict[num][1]])
    print(tabulate(tableData, headers=HEADERS, tablefmt="fancy_grid"))
    userChoice = input("Choose a course: ")
    if userChoice == '':
        sys.exit()
    elif int(userChoice) not in list(idDict.keys()):
        sys.exit()
    return((idDict[int(userChoice)][0],idDict[int(userChoice)][1],idDict[int(userChoice)][2]))


def chooseFile():
    files = Fetch.fetchFiles(chooseCourse()[0], canvasDomain, canvasToken)
    tableData = []
    HEADERS = Format.formatHeaders(["#", "Name", "Size", "Type"])
    idDict = {}
    i = 0
    for classFile in files:
        idDict.update({i:(classFile['display_name'], 
                          classFile['url'],
                          humanfriendly.format_size(classFile['size']),
                          Format.formatFileType(classFile['mime_class']))})
        i = i+1
    for num in idDict.keys():
        tableData.append([num, idDict[num][0], idDict[num][2], idDict[num][3]])
    print(tabulate(tableData, headers=HEADERS, tablefmt="fancy_grid"))
    userChoice = input("Choose a file: ")
    if userChoice == '':
        sys.exit()
    elif int(userChoice) not in list(idDict.keys()):
        sys.exit()
    else:
        return(idDict[int(userChoice)][0], idDict[int(userChoice)][1])


# Prints list of assignments for a given course
def listAssignments(courseId, summary=False):
    assignments = Fetch.fetchAssignments(courseId, canvasDomain, canvasToken)
    for assignment in assignments:
        if summary:
            print(" â€¢ "+assignment['name'])
        else:
            print(assignment['name'])


# Prints list of assignments for a given course
def listAssignmentsTable(courseId):
    assignments = Fetch.fetchAssignments(courseId, canvasDomain, canvasToken)
    #  print(assignments)
    tableData = []
    HEADERS= Format.formatHeaders(["Name", "Due Date", "Status", "Score"])
    for assignment in assignments:
        fullName = assignment['name']
        ID = assignment['id']
        scoreString = Format.formatScore(assignment, False)
        status = Format.formatStatus(assignment)
        dueDate = Format.formatDueDate(assignment)
        tableData.append((fullName, dueDate, status, scoreString))
    print(tabulate(tableData, headers=HEADERS, tablefmt="fancy_grid"))





# Prints list of assignments for a given course
def listAllGrades():
    courses = Fetch.fetchActiveCourses(canvasDomain, canvasToken)
    tableData = []
    HEADERS=Format.formatHeaders(["Name", "Current Grade", "Current Score", "Final Grade", "Final Score"])
    for course in courses:
        print(course)
        fullName = course['course_code'] # changed from name cuz it's so long
        courseId = course['id']
        endDate = course['end_at']
        ccg = Format.formatCourseScore(course['enrollments'][0]['computed_current_grade'])
        ccs = Format.formatCourseScore(course['enrollments'][0]['computed_current_score'])
        cfg = Format.formatCourseScore(course['enrollments'][0]['computed_final_grade'])
        cfs = Format.formatCourseScore(course['enrollments'][0]['computed_final_score'])
        if not endDate:
            tableData.append((fullName, ccg, ccs, cfg, cfs))
    print(tabulate(tableData, headers=HEADERS, tablefmt="fancy_grid"))




# Prints a list of active courses
def listActiveCourses():
    courses = Fetch.fetchActiveCourses(canvasDomain, canvasToken)
    for course in courses:
        fullName = course['name']
        courseId = course['id']
        endDate = course['end_at']
        if not endDate:
            print("[ID: "+str(courseId)+"] "+fullName)


# Prints a list of active courses in a table
def listActiveCoursesTable():
    courses = Fetch.fetchActiveCourses(canvasDomain, canvasToken)
    tableData = []
    HEADERS=Format.formatHeaders(["ID", "Name"])
    for course in courses:
        fullName = course['name']
        courseId = course['id']
        endDate = course['end_at']
        if not endDate:
            tableData.append((courseId, fullName))
    print(tabulate(tableData, headers=HEADERS, tablefmt="fancy_grid"))


# Prints a list of active courses and their outstanding assignments
def assignmentSummary():
    courses = Fetch.fetchCourseIDs(canvasDomain, canvasToken)
    #  print(courses.keys())
    for course in courses:
        print("\u0332".join(course))
        listAssignments(courses[course], True)


def parseArgs():
    args = argparse.ArgumentParser(
        description='A light-weight command-line interface for canvas.')

    args.add_argument('-list', choices=['courses', 'assignments'],
                      help='List either courses or assignments')
    args.add_argument('-courseID', type=str,
                      help='If you know the ID of your course, add it here to speed up the search')
    args.add_argument('-summary', action='store_true',
                      help='print a summary of courses')
    args.add_argument('-download', metavar='assignmentID', type=str,
                      help='download either a course file or assignment submission')
    args.add_argument('-open', choices=['course', 'assignment'], type=str,
                      help='Open the page for a course or assignment in a web browser')
    args.add_argument('-grades', metavar='<courseID> (optional)', type=str,
                      help='Show grades for all courses or a breakdown for one course')
    return args.parse_args()

def main():

    # Declare global variables
    global conf
    global canvasToken
    global canvasDomain

    # Load config file & save config file
    with open(os.path.expanduser("~") + "/.config/canvas-cli/config.yaml", 'r') as stream:
        conf = yaml.safe_load(stream)

    canvasDomain = str(conf['default']['canvasdomain'])
    canvasToken = str(conf['default']['canvastoken'])

    args = parseArgs()

    if args.list and args.list == 'courses':
        listActiveCoursesTable()

    if args.list and args.list == 'assignments':
        if args.courseID:
            listAssignmentsTable(args.courseID)
        else:
            listAssignmentsTable(chooseCourse()[0])

    if args.summary:
        assignmentSummary()

    if args.download and args.download == 'submission':
        Fetch.downloadFile(chooseAssignment(chooseCourse()[0]))
    if args.download and args.download == 'file':
        Fetch.downloadFile(chooseFile())

    if args.open and args.open == 'assignment':
        chooseAssignment(chooseCourse()[0])
    if args.open and args.open == 'course':
        chooseCourse()

    if args.grades:
        listAllGrades()



if __name__ == "__main__":
    main()

